

/***************************** Include Files *******************************/
#include "hdmi_text_controller.h"
#include "stdio.h"
#include "stdlib.h"
#include "string.h"
#include "sleep.h"

#include <xtmrctr.h>
#include "xintc.h"
/************************** Function Definitions ***************************/

void textHDMIColorClr()
{
	for (int i = 0; i<(ROWS*COLUMNS); i++)
	{
		hdmi_ctrl->VRAM[i] = 0x00;
	}
}

void drawPixel(int x, int y, uint8_t color)
{

	int index = (y*COLUMNS + x)/2;
	uint8_t current = hdmi_ctrl->VRAM[index];
	uint8_t shifted = current;
	if((y*COLUMNS + x)%2 == 0) {
		if((current & 0x0F) == color) {
			return;
		}
		hdmi_ctrl->VRAM[index] = (current & 0xF0) | (color);
	}	else {
		if(((shifted & 0xF0) >> 4)==color) {
			return;
		}
		hdmi_ctrl->VRAM[index] = (current & 0x0F) | (color << 4);
	}	
}

uint8_t readPixel(int x, int y) {
	int index = (y*COLUMNS + x)/2;
	if((y*COLUMNS + x)%2 == 0) {
		return hdmi_ctrl->VRAM[index] & 0x0F;
	}	else {
		return ((hdmi_ctrl->VRAM[index] & 0xF0) >> 4);
	}
}

void drawNote(int lane, int y) {
    uint8_t color;
    int curr_y;
    if(y-5<0) {
        curr_y = 0;
    } else {
        curr_y = y-5;
    }
    for(; (curr_y < y+30) && (curr_y<480) ; curr_y++) {
        if(curr_y<0) {
            continue;
        }
        if(curr_y<y) {
            color = 0;
        } else {
            if(lane==0 || lane == 3) {
                    color = 5;
            } else {
                color = 6;
            }
        }
        uint8_t row_color = readPixel(lane*49+2,curr_y);
        if(row_color == color || row_color ==1 || row_color == 2) {
            continue;
        }
        for(int x=lane*49+2; x < lane*49+49+2; x++) {
            drawPixel(x,curr_y,color);
        }
    }
}

// void drawLong(int lane, int dist_from_line, int color) {
// 	int x_c = lane*50 + 24;
// 	int y_c = 430-dist_from_line;
// 	int radius = 12;
// 	for(int x =-25; x < 25; x++) {
// 		for(int y = -40; y < 40; y++) {
// 			if(y+y_c<0 || y+y_c>479 ) {
// 				continue;
// 			}
	
// 			if(x*x/3 + (y*y)/5 < radius*radius) {
// 				drawPixel(x+x_c, y+y_c, color);
// 			}
// 		}
// 	}
// }

int scoreCalc(int hitY, int expY, int lane){
//	xil_printf("Hit Y: %d\n", hitY);
//	xil_printf("Exp Y: %d\n", expY);
	int score = 0;
    int diff = abs(hitY - expY);
//    xil_printf("ABS: %d\n", diff);
    if (diff < 5)
    	score = 100;
    else if (diff < 15)
    	score = 50;
    else if (diff < 30)
        score = 20;
    else
        score = 0;

//    drawHit(score, lane);
    return score;
}



void textHDMIColorScreenSaver(uint8_t keycode[4], int clicked[4])
{
    for (int x = 0; x < COLUMNS; x++) {
        for (int y = ROWS - 33; y < ROWS - 29; y++) {
            drawPixel(x, y, 1);
        }
    }

    for (int i = 0; i < 4; i++) {
        clicked[i] = 0;
    }

    for (int i = 0; i < 4; i++) {
        switch (keycode[i]) {
            case 0x07: // 'd'
                for (int x = 24 - 3; x < 24 + 3; x++) {
                    for (int y = ROWS - 33; y < ROWS - 29; y++) {
                        drawPixel(x, y, 2);
                    }
                }
                clicked[0] = 1;
                break;
            case 0x09: // 'f'
                for (int x = 74 - 3; x < 74 + 3; x++) {
                    for (int y = ROWS - 33; y < ROWS - 29; y++) {
                        drawPixel(x, y, 2);
                    }
                }
                clicked[1] = 1;
                break;
            case 0x0D: // 'j'
                for (int x = 124 - 3; x < 124 + 3; x++) {
                    for (int y = ROWS - 33; y < ROWS - 29; y++) {
                        drawPixel(x, y, 2);
                    }
                }
                clicked[2] = 1;
                break;
            case 0x0E: // 'k'
                for (int x = 174 - 3; x < 174 + 3; x++) {
                    for (int y = ROWS - 33; y < ROWS - 29; y++) {
                        drawPixel(x, y, 2);
                    }
                }
                clicked[3] = 1;
                break;
            default:
                break;
        }
    }
}


//Call this function for your Week 2 test
hdmiTestWeek2()
{

}

